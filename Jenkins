pipeline {

    agent {
        docker {
            image 'python:3.7.4-alpine3.10'
        }
    }

    void setBuildStatus(String message, String state) {
      step([
          $class: "GitHubCommitStatusSetter",
          reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/DirtybirdInc/pyproj"],
          contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status"],
          errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
          statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
      ]);
    }



    stages {
        stage('Run Tests') {
            steps {
                sh 'pip install -r requirements.txt'
                sh 'py.test --verbose --cov-report html --cov-report xml --cov=myapp --junit-xml test-reports/results.xml tests/'
	        }
            post {
                always {
                    junit 'test-reports/results.xml'
                    publishHTML target: [
                            allowMissing         : false,
                            alwaysLinkToLastBuild: false,
                            keepAll              : true,
                            reportDir            : 'htmlcov',
                            reportFiles          : 'index.html',
                            reportName           : 'Code Coverage Report'
                        ]
                }
            }
        }
        stage('Validate Coverage') {
            steps {
                try {
                    sh 'python analyze_code_coverage.py'
                    setBuildStatus("Code coverage is OK", "SUCCESS");
                } catch (err) {
                    setBuildStatus("Code coverage is bad", "ERROR");
                    throw err
                }
	        }
        }
    }
}
