pipeline {

    agent {
        docker {
            image 'python:3.7.4-alpine3.10'
        }
    }

    stages {
        stage('Run Tests') {
            steps {
                sh 'pip install -r requirements.txt'
                sh 'py.test --verbose --cov-report html --cov-report xml --cov=myapp --junit-xml test-reports/results.xml tests/'
	        }
            post {
                always {
                    junit 'test-reports/results.xml'
                    publishHTML target: [
                            allowMissing         : false,
                            alwaysLinkToLastBuild: false,
                            keepAll              : true,
                            reportDir            : 'htmlcov',
                            reportFiles          : 'index.html',
                            reportName           : 'Code Coverage Report'
                        ]
                }
            }
        }
        stage('Validate Coverage') {
            steps {
                try {
                    sh 'python analyze_code_coverage.py'
                    if (env.CHANGE_ID) {
                        pullRequest.createStatus(status: 'success',
                             context: 'continuous-integration/jenkins/pr-merge/tests',
                             description: 'Code coverage is good',
                             targetUrl: "${env.JOB_URL}/testResults")
                    }
                } catch (err) {
                    // CHANGE_ID is set only for pull requests, so it is safe to access the pullRequest global variable
                    if (env.CHANGE_ID) {
                        pullRequest.createStatus(status: 'failure',
                             context: 'continuous-integration/jenkins/pr-merge/tests',
                             description: 'Code coverage is bad',
                             targetUrl: "${env.JOB_URL}/testResults")
                    }
                    throw err
                }
	        }
        }
    }
}
